import {Injectable} from "@angular/core";
import {HttpClient} from "@angular/common/http";
import {Observable, throwError} from "rxjs";
import {catchError, retry} from "rxjs/operators";
import {Project} from "../project"
import {SourceFile} from "../sourceFile";
import {CompilationResult} from "../compilationResult";
import {SourceCode} from "../sourceCode";

const allProjectsUrl = 'all-projects';
const createProjectUrl = 'create-project';
const deleteProjectUrl = 'delete-project';
const allSourceFilesOfProjectUrl = 'read-project';
const updateProjectNameUrl = 'update-project-name';

const allSourceFilesUrl = 'all-source-files';
const createSourceFileUrl = 'create-source-file';
const deleteSourceFileUrl = 'delete-source-file';
const updateSourceFileNameUrl = 'update-source-file-name';
const updateSourceFileCodeUrl = 'update-source-file-code';

const compileUrl = 'compile';

/*
  Service for interacting with the backend REST API.
  To use it inside a component, pass an HttpService object as an argument to the component's constructor.
 */
@Injectable({
  providedIn: 'root'
})
export class HttpService {
  constructor(private http: HttpClient) {}

  getAllProjects(): Observable<Project[]> {
    return this.http.get<Project[]>(allProjectsUrl);
  }

  createProject(newProjectName: string): Observable<Project> {
    let newProject = new Project();
    newProject.name = newProjectName;
    // project id is generated by the Project Service, no need to set it
    return this.http.post<Project>(createProjectUrl, newProject);
  }

  deleteProject(projectId: string): Observable<void> {
    return this.http.delete<void>(deleteProjectUrl + '/' + projectId);
  }

  getAllSourceFilesOfProject(projectId: string): Observable<SourceFile[]> {
    return this.http.get<SourceFile[]>(allSourceFilesOfProjectUrl + '/' + projectId);
  }

  updateProjectName(projectId: string, newProjectName: string): Observable<Project> {
    return this.http.post<Project>(updateProjectNameUrl + '/' + projectId, newProjectName);
  }

  getAllSourceFiles(): Observable<SourceFile[]> {
    return this.http.get<SourceFile[]>(allSourceFilesUrl);
  }

  createSourceFile(newSourceFileName: string, sourceFileParentProject: Project): Observable<SourceFile> {
    let newSourceFile = new SourceFile();
    newSourceFile.name = newSourceFileName;
    newSourceFile.project = sourceFileParentProject;
    return this.http.post<SourceFile>(createSourceFileUrl, newSourceFile);
  }

  deleteSourceFile(sourceFileId: string): Observable<void> {
    return this.http.delete<void>(deleteSourceFileUrl + '/' + sourceFileId);
  }

  updateSourceFileName(sourceFileId: string, newSourceFileName: string): Observable<SourceFile> {
    return this.http.post<SourceFile>(updateSourceFileNameUrl + '/' + sourceFileId, newSourceFileName);
  }

  updateSourceFileCode(sourceFileId: string, newSourceCode: string): Observable<SourceFile> {
    return this.http.post<SourceFile>(updateSourceFileCodeUrl + '/' + sourceFileId, newSourceCode);
  }

  compile(sourceCode: SourceCode): Observable<CompilationResult> {
    return this.http.post<CompilationResult>(compileUrl, sourceCode);
  }
}
